@page "/Admin/Permissions"
@using iOSClub.Share.Data
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using System.Text
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IJSRuntime JS
@inject IDbContextFactory<SignContext> DbFactory

<PageTitle>权限管理</PageTitle>

<InputFile id="fileInput" OnChange="@UploadFiles" hidden multiple/>

@code
{
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var reader = new StreamReader(e.File.OpenReadStream());
        var result = await reader.ReadToEndAsync();
        reader.Dispose();
        if (string.IsNullOrEmpty(result)) return;
        var context = await DbFactory.CreateDbContextAsync();

        var list = JsonConvert.DeserializeObject<StaffsList>(result)!;
        await Update(context, list);

        await context.SaveChangesAsync();
        await Update(context);
        await context.DisposeAsync();
        StateHasChanged();
    }
}

<Modal Title="@("添加")"
       Visible="@_visible"
       OnCancel="@HandleCancel"
       Footer="null">
    <GridRow>
        <GridCol Span="6"/>
        <GridCol Span="12">
            <Space>
                <SpaceItem>
                    <Search EnterButton="@("搜索")" OnSearch="@(async s => await Search(s))" Size="large"/>
                </SpaceItem>
            </Space>
        </GridCol>
        <GridCol Span="6"/>
    </GridRow>
    <Table TItem="SignModel" PageSize="3" DataSource="@SearchResult">
        <PropertyColumn Title="姓名" Property="c => c.UserName"/>
        <PropertyColumn Title="学号" Property="c => c.UserId"/>
        <PropertyColumn Title="学院" Property="c => c.Academy"/>
        <ActionColumn Title="操作">
            <Button OnClick="@(() => Add(context))">添加</Button>
        </ActionColumn>
    </Table>
</Modal>

@code
{
    private List<SignModel> SearchResult { get; set; } = new();

    private string Department = "";

    private Task OpenTable(string department)
    {
        _visible = true;
        Department = department;
        return Task.CompletedTask;
    }

    private async Task Add(SignModel model)
    {
        var staff = new PermissionsModel() { Name = model.UserName, Identity = Department, UserId = model.UserId };
        await using var context = await DbFactory.CreateDbContextAsync();
        var isAdd = true;
        try
        {
            await context.Staffs.AddAsync(staff);
        }
        catch
        {
            isAdd = false;
        }

        if (isAdd) await context.SaveChangesAsync();
        switch (Department)
        {
            case "President":
                President.Add(staff);
                break;
            case "TechnologyMinister":
                TechnologyMinister.Add(staff);
                break;
            case "PracticalMinister":
                PracticalMinister.Add(staff);
                break;
            case "NewMediaMinister":
                NewMediaMinister.Add(staff);
                break;
            case "TechnologyMember":
                TechnologyMember.Add(staff);
                break;
            case "PracticalMember":
                PracticalMember.Add(staff);
                break;
            case "NewMediaMember":
                NewMediaMember.Add(staff);
                break;
        }

        StateHasChanged();
    }

    private async Task Search(string s)
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        SearchResult = await context.Students.Where(x => x.UserName.StartsWith(s)).ToListAsync();
        StateHasChanged();
    }

    private bool _visible;

    private void HandleCancel()
    {
        SearchResult.Clear();
        _visible = false;
        Department = "";
    }
}

<PageView Style="min-height: 100vh">
    <Extra>
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="@FileDownload">下载文件</Button>
            </SpaceItem>
            <SpaceItem>
                <Upload Name="files">
                    <label class="ant-btn" for="fileInput">上传Json数据</label>
                </Upload>
            </SpaceItem>
        </Space>
    </Extra>
    <Context>
        <div class="phone-top-display">
            <Tabs TabPosition="TabPosition.Top">
                @Context
            </Tabs>
        </div>
        <div class="phone-left-display">
            <Tabs TabPosition="TabPosition.Left" Size="TabSize.Large">
                @Context
            </Tabs>
        </div>

    </Context>
</PageView>

<Modal Title="@("操作")"
       Visible="@_operaVisible"
       OnCancel="@(() => OpenOrClose())"
       Footer="null">
    <Space>
        <SpaceItem>
            <Button OnClick="@(() => OpenTable(_department))">添加成员</Button>
            <Button Danger OnClick="@(async () => await DeleteAll(_department))">全部删除</Button>
        </SpaceItem>
    </Space>
</Modal>

@code
{
    private bool _operaVisible;
    private string _department = "";

    private void OpenOrClose(string department = "")
    {
        _department = department;
        _operaVisible = string.IsNullOrEmpty(department);
    }
}

@code
{
    private RenderFragment Context =>
        @<Template>
            <TabPane Tab="社长/副社长/秘书长">
                <header class="header">
                    <h3>社长/副社长/秘书长</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem Class="phone-top-display">
                                <Button Type="@ButtonType.Primary" OnClick="@(() => _operaVisible = true)">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("President"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("President"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Space>
                    @foreach (var item in President)
                    {
                        <SpaceItem>
                            <Popconfirm Title="确定删除这条数据?"
                                        Placement="Placement.TopLeft"
                                        OnConfirm="@(async () => await Delete(item, "President"))">
                                <Button Type="@ButtonType.Primary">@item.Name</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                </Space>
            </TabPane>
            <TabPane Tab="科技部">
                <header class="header">
                    <h3>科技部部长/副部长</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem Class="phone-top-display">
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("TechnologyMinister"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("TechnologyMinister"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("TechnologyMinister"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Space>
                    @foreach (var item in TechnologyMinister)
                    {
                        <SpaceItem>
                            <Popconfirm Title="确定删除这条数据?"
                                        Placement="Placement.TopLeft"
                                        OnConfirm="@(async () => await Delete(item, "TechnologyMinister"))">
                                <Button Type="@ButtonType.Primary">@item.Name</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                </Space>
                <Divider/>
                <header class="header">
                    <h3>科技部成员</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem>
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("TechnologyMember"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("TechnologyMember"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("TechnologyMember"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Table TItem="PermissionsModel" DataSource="@TechnologyMember">
                    <PropertyColumn Title="姓名" Property="c => c.Name"/>
                    <PropertyColumn Title="学号" Property="c => c.UserId"/>
                    <ActionColumn Title="操作">
                        <Space>
                            <SpaceItem>
                                <Button Danger OnClick="@(async () => await Delete(context, "TechnologyMember"))">删除</Button>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            </TabPane>
            <TabPane Tab="交流实践部">
                <header class="header">
                    <h3>交流实践部部长/副部长</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem Class="phone-top-display">
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("PracticalMinister"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("PracticalMinister"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("PracticalMinister"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Space>
                    @foreach (var item in PracticalMinister)
                    {
                        <SpaceItem>
                            <Popconfirm Title="确定删除这条数据?"
                                        Placement="Placement.TopLeft"
                                        OnConfirm="@(async () => await Delete(item, "PracticalMinister"))">
                                <Button Type="@ButtonType.Primary">@item.Name</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                </Space>
                <Divider/>
                <header class="header">
                    <h3>交流实践部成员</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem>
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("PracticalMember"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("PracticalMember"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("PracticalMember"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Table TItem="PermissionsModel" DataSource="@PracticalMember">
                    <PropertyColumn Title="姓名" Property="c => c.Name"/>
                    <PropertyColumn Title="学号" Property="c => c.UserId"/>
                    <ActionColumn Title="操作">
                        <Space>
                            <SpaceItem>
                                <Button Danger OnClick="@(async () => await Delete(context, "PracticalMember"))">删除</Button>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            </TabPane>
            <TabPane Tab="新媒体部">
                <header class="header">
                    <h3>新媒体部部长/副部长</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem Class="phone-top-display">
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("NewMediaMinister"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("NewMediaMinister"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("NewMediaMinister"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Space>
                    @foreach (var item in NewMediaMinister)
                    {
                        <SpaceItem>
                            <Popconfirm Title="确定删除这条数据?"
                                        Placement="Placement.TopLeft"
                                        OnConfirm="@(async () => await Delete(item, "NewMediaMinister"))">
                                <Button Type="@ButtonType.Primary">@item.Name</Button>
                            </Popconfirm>
                        </SpaceItem>
                    }
                </Space>
                <Divider/>
                <header class="header">
                    <h3>新媒体部成员</h3>
                    <Space>
                        <div class="phone-top-display">
                            <SpaceItem>
                                <Button Type="@ButtonType.Primary" OnClick="@(() => OpenOrClose("NewMediaMember"))">操作</Button>
                            </SpaceItem>
                        </div>
                        <div class="phone-left-display">
                            <SpaceItem>
                                <Button OnClick="@(() => OpenTable("NewMediaMember"))">添加成员</Button>
                                <Button Danger OnClick="@(async () => await DeleteAll("NewMediaMember"))">全部删除</Button>
                            </SpaceItem>
                        </div>
                    </Space>
                </header>
                <Table TItem="PermissionsModel" DataSource="@NewMediaMember">
                    <PropertyColumn Title="姓名" Property="c => c.Name"/>
                    <PropertyColumn Title="学号" Property="c => c.UserId"/>
                    <ActionColumn Title="操作">
                        <Space>
                            <SpaceItem>
                                <Button Danger OnClick="@(async () => await Delete(context, "NewMediaMember"))">删除</Button>
    </SpaceItem>
    </Space>
    </ActionColumn>
    </Table>
    </TabPane>
    </Template>;
}

@code {
    private List<PermissionsModel> President { get; set; } = new();
    private List<PermissionsModel> TechnologyMinister { get; set; } = new();
    private List<PermissionsModel> PracticalMinister { get; set; } = new();
    private List<PermissionsModel> NewMediaMinister { get; set; } = new();
    private List<PermissionsModel> TechnologyMember { get; set; } = new();
    private List<PermissionsModel> PracticalMember { get; set; } = new();
    private List<PermissionsModel> NewMediaMember { get; set; } = new();

    private async Task FileDownload()
    {
        var staffsList = new StaffsList()
        {
            President = President,
            TechnologyMinister = TechnologyMinister,
            PracticalMinister = PracticalMinister,
            NewMediaMinister = NewMediaMinister,
            TechnologyMember = TechnologyMember,
            PracticalMember = PracticalMember,
            NewMediaMember = NewMediaMember
        };
        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
        };
        var jsonString = JsonSerializer.Serialize(staffsList, options);
        var data = Encoding.UTF8.GetBytes(jsonString);
        await Download("staff.json", data);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var context = await DbFactory.CreateDbContextAsync();
        await Update(context);
    }

    private async Task Update(SignContext context)
    {
        President = await context.Staffs.Where(x => x.Identity == "President").ToListAsync();
        TechnologyMinister = await context.Staffs.Where(x => x.Identity == "TechnologyMinister").ToListAsync();
        PracticalMinister = await context.Staffs.Where(x => x.Identity == "PracticalMinister").ToListAsync();
        NewMediaMinister = await context.Staffs.Where(x => x.Identity == "NewMediaMinister").ToListAsync();
        TechnologyMember = await context.Staffs.Where(x => x.Identity == "TechnologyMember").ToListAsync();
        PracticalMember = await context.Staffs.Where(x => x.Identity == "PracticalMember").ToListAsync();
        NewMediaMember = await context.Staffs.Where(x => x.Identity == "NewMediaMember").ToListAsync();
    }

    private async Task Update(SignContext context, StaffsList list)
    {
        context.Staffs.RemoveRange(President);
        context.Staffs.RemoveRange(TechnologyMinister);
        context.Staffs.RemoveRange(PracticalMinister);
        context.Staffs.RemoveRange(NewMediaMinister);
        await context.Staffs.AddRangeAsync(list.President);
        await context.Staffs.AddRangeAsync(list.TechnologyMinister);
        await context.Staffs.AddRangeAsync(list.PracticalMinister);
        await context.Staffs.AddRangeAsync(list.NewMediaMinister);
        await context.Staffs.AddRangeAsync(list.TechnologyMember);
        await context.Staffs.AddRangeAsync(list.PracticalMember);
        await context.Staffs.AddRangeAsync(list.NewMediaMember);
        await context.SaveChangesAsync();
    }

    private async Task Download(string fileName, byte[] data)
    {
        await JS.InvokeVoidAsync("jsSaveAsFile", fileName, Convert.ToBase64String(data));
    }

    [Serializable]
    class StaffsList
    {
        public List<PermissionsModel> President { get; init; } = new();
        public List<PermissionsModel> TechnologyMinister { get; init; } = new();
        public List<PermissionsModel> PracticalMinister { get; init; } = new();
        public List<PermissionsModel> NewMediaMinister { get; init; } = new();
        public List<PermissionsModel> TechnologyMember { get; init; } = new();
        public List<PermissionsModel> PracticalMember { get; init; } = new();
        public List<PermissionsModel> NewMediaMember { get; init; } = new();
    }

    private async Task Delete(PermissionsModel context, string department)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        dbContext.Staffs.Remove(context);
        await dbContext.SaveChangesAsync();
        switch (department)
        {
            case "President":
                President.Remove(context);
                return;
            case "TechnologyMinister":
                TechnologyMinister.Remove(context);
                return;
            case "PracticalMinister":
                PracticalMinister.Remove(context);
                return;
            case "NewMediaMinister":
                NewMediaMinister.Remove(context);
                return;
            case "TechnologyMember":
                TechnologyMember.Remove(context);
                return;
            case "PracticalMember":
                PracticalMember.Remove(context);
                return;
            case "NewMediaMember":
                NewMediaMember.Remove(context);
                break;
        }
    }

    private async Task DeleteAll(string department)
    {
        await using var dbContext = await DbFactory.CreateDbContextAsync();
        switch (department)
        {
            case "President":
                dbContext.Staffs.RemoveRange(President);
                await dbContext.SaveChangesAsync();
                President.Clear();
                return;
            case "TechnologyMinister":
                dbContext.Staffs.RemoveRange(TechnologyMinister);
                await dbContext.SaveChangesAsync();
                TechnologyMinister.Clear();
                return;
            case "PracticalMinister":
                dbContext.Staffs.RemoveRange(PracticalMinister);
                await dbContext.SaveChangesAsync();
                PracticalMinister.Clear();
                return;
            case "NewMediaMinister":
                dbContext.Staffs.RemoveRange(NewMediaMinister);
                await dbContext.SaveChangesAsync();
                NewMediaMinister.Clear();
                return;
            case "TechnologyMember":
                dbContext.Staffs.RemoveRange(TechnologyMember);
                await dbContext.SaveChangesAsync();
                TechnologyMember.Clear();
                return;
            case "PracticalMember":
                dbContext.Staffs.RemoveRange(PracticalMember);
                await dbContext.SaveChangesAsync();
                PracticalMember.Clear();
                return;
            case "NewMediaMember":
                dbContext.Staffs.RemoveRange(NewMediaMember);
                await dbContext.SaveChangesAsync();
                NewMediaMember.Clear();
                break;
        }
    }

}