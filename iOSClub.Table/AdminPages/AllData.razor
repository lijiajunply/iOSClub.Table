@page "/AllData"
@using Microsoft.EntityFrameworkCore
@using iOSClub.Table.Data
@using iOSClub.Table.Components
@using System.Text.Json
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Security.Claims
@inject IJSRuntime JS
@inject IDbContextFactory<SignContext> DbFactory

<PageTitle>数据</PageTitle>

<InputFile id="fileInput" OnChange="@UploadFiles" hidden multiple/>
<Modal Title="@("Title")"
       Visible="@_visible"
       OnCancel="@HandleCancel"
       Footer="null">
    <Space>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="@CsvDownload">下载Csv文件</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="@JsonDownload">下载Json文件</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="@HandleCancel">取消</Button>
        </SpaceItem>
    </Space>

</Modal>

@code
{
    private async Task JsonDownload()
    {
        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
        };
        var jsonString = JsonSerializer.Serialize(Models, options);
        var data = Encoding.UTF8.GetBytes(jsonString);

        await Download("data.json", data);
    }

    private async Task Download(string fileName, byte[] data)
    {
        await JS.InvokeVoidAsync("jsSaveAsFile", fileName, Convert.ToBase64String(data));
        HandleCancel();
    }

    private async Task CsvDownload()
    {
        var jsonString = SignModel.GetCsv(Models);
        var data = Encoding.UTF8.GetBytes(jsonString);

        await Download("data.csv", data);
    }
}

@if (isHasPro)
{
    <PageHeader Ghost="false" Class="data">
        <PageHeaderTitle>
            <header>
                <i class="light" style="background-color: #fd6458;"></i>
                <i class="light" style="background-color: #ffbf2b; margin-left: 8px;"></i>
                <i class="light" style="background-color: #24cc3d; margin-left: 8px;"></i>
            </header>
        </PageHeaderTitle>
        <PageHeaderExtra>
            <header>
                <Button Type="@ButtonType.Primary" OnClick="@FileDownload">下载文件</Button>
                <Upload Name="files">
                    <label class="ant-btn" for="fileInput">上传Json数据</label>
                </Upload>
                <Button Type="@ButtonType.Primary" OnClick="@Flushed">刷新</Button>
                @if (DeleteModels.Count > 0)
                {
                    <Button Type="@ButtonType.Primary" OnClick="@Recover">恢复</Button>
                }
            </header>
        </PageHeaderExtra>
        <PageHeaderContent>
            <GridRow>
                <GridCol Span="8"/>
                <GridCol Span="8">
                    <Space>
                        <SpaceItem>
                            <Select DataSource="@SearchItems"
                            		@bind-Value="@SearchItem">
                            </Select>
                        </SpaceItem>
                        <SpaceItem>
                            <Search Placeholder="请输入搜索项" AllowClear EnterButton="@("搜索")" @bind-Value="@SearchValue" Size="large"/>
                        </SpaceItem>
                    </Space>
                </GridCol>
                <GridCol Span="8"/>
            </GridRow>

            <Table TItem="SignModel" DataSource="@Models">
                <PropertyColumn Title="姓名" Property="c => c.UserName"/>
                <PropertyColumn Title="学号" Property="c => c.Id"/>
                <PropertyColumn Title="学院" Property="c => c.Academy"/>
                <PropertyColumn Title="政治面貌" Property="c => c.PoliticalLandscape"/>
                <PropertyColumn Title="性别" Property="c => c.Gender"/>
                <PropertyColumn Title="专业班级" Property="c => c.ClassName"/>
                <PropertyColumn Title="手机号码" Property="c => c.PhoneNum"/>
                <ActionColumn Title="操作">
                    <Space>
                        <SpaceItem>
                            <Button Danger OnClick="() => Delete(context)">删除</Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Danger OnClick="() => OpenTable(context)">更改</Button>
                            <Drawer Closable="true" Width="720" Visible="Visible"
                                    Title='"更改"' OnClose="@CloseTable"
                                    Mask="false">
                                <Template style="height:90%">
                                    <MemberTable ChangeModel="ChangeModel"/>
                                </Template>
                            </Drawer>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>
        </PageHeaderContent>
    </PageHeader>
}
else
{
    <h1>
        对不起，您没有权限!
    </h1>
}


@code {

    private static IEnumerable<string> SearchItems => new[] { "姓名", "学号", "学院" };
    private string SearchItem { get; set; } = "姓名";

    private string _searchValue = "";

    private string SearchValue
    {
        get => _searchValue;
        set
        {
            if (string.IsNullOrEmpty(value)) return;
            _searchValue = value;
            GetData();
        }
    }

    private async void GetData()
    {
        var context = await DbFactory.CreateDbContextAsync();
        Models = SearchItem switch
        {
            "姓名" => await context.Students.Where(x => x.UserName.StartsWith(_searchValue)).ToListAsync(),
            "学号" => await context.Students.Where(x => x.Id.StartsWith(_searchValue)).ToListAsync(),
            "学院" => await context.Students.Where(x => x.Academy.StartsWith(_searchValue)).ToListAsync(),
            _ => Models
            };

        await context.DisposeAsync();
    }

    private List<SignModel> DeleteModels { get; set; } = new();
    private List<SignModel> Models { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await Flushed();
        await base.OnParametersSetAsync();
    }


    private async Task Flushed()
    {
        var context = await DbFactory.CreateDbContextAsync();
        Models = await context.Students.ToListAsync();
        await context.DisposeAsync();
    }

    private async Task Delete(SignModel model)
    {
        var context = await DbFactory.CreateDbContextAsync();
        context.Students.Remove(model);
        await context.SaveChangesAsync();
        Models.Remove(model);
        DeleteModels.Add(model);
        await context.DisposeAsync();
    }


    private async Task Recover()
    {
        var context = await DbFactory.CreateDbContextAsync();
        foreach (var item in DeleteModels)
        {
            await context.Students.AddAsync(item);
            Models.Add(item);
        }
        DeleteModels.Clear();
        await context.SaveChangesAsync();
        await context.DisposeAsync();
    }

    private bool isHasPro;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                var first = user.Claims.First(x => x.Type == ClaimTypes.Role);
                isHasPro = first.Value is "President" or "TechnologyMinister" or "PracticalMinister" or "NewMediaMinister" or "Founder";
            }
        }
    }

}

@code
{
    private bool Visible;
    private SignModel ChangeModel { get; set; } = new();

    private void CloseTable()
    {
        Visible = false;
        ChangeModel = new SignModel();
    }

    private void OpenTable(SignModel model)
    {
        Visible = true;
        ChangeModel = model;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var reader = new StreamReader(e.File.OpenReadStream());
        var result = await reader.ReadLineAsync();
        reader.Dispose();
        if (string.IsNullOrEmpty(result)) return;
        var list = JsonConvert.DeserializeObject<List<SignModel>>(result);
        var context = await DbFactory.CreateDbContextAsync();
        if (list != null)
            foreach (var model in list)
                if (!await context.Students.AnyAsync(x => x.Id == model.Id && x.UserName == model.UserName))
                    await context.Students.AddAsync(model);
        await context.SaveChangesAsync();
    }

    private void FileDownload()
    {
        _visible = true;
    }

    private bool _visible;

    private void HandleCancel()
    {
        _visible = false;
    }
}

<style>
    .data{
        overflow: visible;
        border-radius: 10px;
        scroll-behavior: auto;
        margin-top: 10px;
        margin-bottom: 10px;
        
    }
    .light {
       
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
    }
	
	header{
	    overflow: hidden;
        /* 防止子元素超出边界 */
        display: flex;
        scroll-snap-align: end;
	}
</style>