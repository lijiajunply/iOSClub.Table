@page "/Signup/{Text?}"
@using Microsoft.EntityFrameworkCore
@using iOSClub.Share.Data
@using iOSClub.Table.Models
@inject IDbContextFactory<SignContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime Js;

<PageTitle>iOS Club - 注册</PageTitle>

@if (isWeiXin)
{
    <div id="Mask">
        <img src="/other/WeChat.jpg" alt="请使用浏览器注册，谢谢"/>
    </div>
}
else
{
    <Form Model="Model"
          class="bg-login"
          Layout="vertical"
          ValidateMode="@FormValidateMode.Rules"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed">
        <h2 style="color: #f5f5f7;">注册</h2>
        <FormItem Class="item" Label="姓名" LabelStyle="color: #f5f5f7;" Rules="@(SignRecord.UserNameRules)">
            <Input @bind-Value="@context.UserName"/>
        </FormItem>
        <FormItem Class="item" Label="性别" LabelStyle="color: #f5f5f7;" Rules="SignRecord.GenderRules">
            <select class="form-control" @bind="@context.Gender">
                <option value="" selected disabled hidden></option>
                @foreach (var item in SignRecord.Genders)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </FormItem>
        <FormItem Class="item" Label="学号" LabelStyle="color: #f5f5f7;" Rules="SignRecord.IdRules">
            <Input @bind-Value="@context.UserId">
        </FormItem>
        <FormItem Class="item" Label="学院" LabelStyle="color: #f5f5f7;" Rules="SignRecord.AcademyRules">
            <select class="form-control" @bind="@context.Academy">
                <option value="" selected disabled hidden></option>
                @foreach (var item in SignRecord.Academies)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </FormItem>
        <FormItem Class="item" Label="政治面貌" LabelStyle="color: #f5f5f7;" Rules="SignRecord.PoliticalLandscapeRules">
            <select class="form-control" @bind="@context.PoliticalLandscape">
                <option value="" selected disabled hidden></option>
                @foreach (var item in SignRecord.PoliticalLandscapes)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </FormItem>
        <FormItem Class="item" Label="专业班级" LabelStyle="color: #f5f5f7;" Rules="SignRecord.ClassNameRules">
            <Input @bind-Value="@context.ClassName">
        </FormItem>
        <FormItem Class="item" Label="手机号码" LabelStyle="color: #f5f5f7;" Rules="SignRecord.PhoneNumRules">
            <Input @bind-Value="@context.PhoneNum">
        </FormItem>

        <FormItem Style="text-align: center">
            <Button Type="@ButtonType.Primary" HtmlType="submit">提交</Button>
        </FormItem>
    </Form>
}


@code
{

    private bool isWeiXin;

    [Parameter] public string? Text { get; set; }

    public SignModel Model { get; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //isWeiXin
            isWeiXin = await Js.InvokeAsync<bool>("isWeiXin");
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task OnFinish()
    {
        if (Loading)
            return;
        try
        {
            Loading = true;
            await using var context = await DbFactory.CreateDbContextAsync();
            var f = await context.Students.FirstOrDefaultAsync(x => x.UserId == Model.UserId);
            if (f == null)
                context.Students.Add(Model);
            else
            {
                f.UserName = Model.UserName;
                f.Academy = Model.Academy;
                f.ClassName = Model.ClassName;
                f.PhoneNum = Model.PhoneNum;
                f.Gender = Model.Gender;
                f.PoliticalLandscape = Model.PoliticalLandscape;
            }

            await context.SaveChangesAsync();
        }
        finally
        {
            Loading = false;
        }

        if (Text == "mc")
        {
            NavigationManager.NavigateTo("/QRCode");
            return;
        }

        NavigationManager.NavigateTo("mqqapi://card/show_pslcard?src_type=internal&version=1&uin=952954710&card_type=group&source=external");
    }

    private bool Loading { get; set; }

    private void OnFinishFailed()
    {
        Console.WriteLine("出问题了");
        Loading = false;
    }
}

<style>
    .bg-login {
    
      border-radius: 10px;
    
      overflow: hidden;
      padding: 38px 38px 10px 38px;
      margin-bottom: 1.1rem;
    
      background: rgba(255, 255, 255, 0.3);
      -webkit-backdrop-filter: blur(20px);
      backdrop-filter: blur(20px);
      box-shadow: inset 0 0 6px rgba(255, 255, 255, 0.3);
    }
    .item{
        padding-left: 10px;
        padding-right: 10px;
    }
    
    .form-control {
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        border: 1px #ccc;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;
        -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }
   
   option{
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
   }
   
   #Mask {
       background: #1c1f23;
       min-height: 100vh;
   }
   
</style>