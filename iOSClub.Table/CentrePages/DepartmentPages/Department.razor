@page "/Centre/Department/{Id?}"
@using iOSClub.Share.Data
@using Markdig
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SignContext> DbFactory
@inject NavigationManager Nav
@inject MessageService MessageService

<PageView Style="height: 100%">
    <Extra>
        @if (IsAdmin)
        {
            <Button Type="@ButtonType.Primary" OnClick="@(() => Nav.NavigateTo($"/Centre/EditProject/{Id}"))">
                @if (string.IsNullOrEmpty(Id))
                {
                    <p>添加项目</p>
                }
                else
                {
                    <p>更改项目</p>
                }
            </Button>
        }
    </Extra>
    <Context>
        @if (string.IsNullOrEmpty(Id))
        {
            <Flex Wrap="wrap" Gap="middle" Justify="space-around">
                @foreach (var item in Projects)
                {
                    <Card Hoverable BodyStyle="padding: 0; overflow: hidden;">
                        <h1>@item.Title</h1>
                        <p>@($"{item.StartTime} - {item.EndTime}")</p>
                        <p>@((MarkupString)Markdown.ToHtml(item.Description))</p>
                        <Button Type="@ButtonType.Primary" OnClick="@(() => Nav.NavigateTo($"/Centre/Department/{item.Id}"))">
                            去看看
                        </Button>
                    </Card>
                }
            </Flex>
        }
        else
        {
            <h1>@Project.Title</h1>
            <p>@($"{Project.StartTime} - {Project.EndTime}")</p>
            <p>@Markdown.ToHtml(Project.Description)</p>
            <Divider/>
            <AntList DataSource="@Project.Tasks" TItem="TaskModel">
                <ListItem>
                    <ListItemMeta >
                        <TitleTemplate>
                            <h3>@context.Title</h3>
                        </TitleTemplate>
                        <DescriptionTemplate>
                            <p>@((MarkupString)Markdown.ToHtml(context.Description))</p>
                        </DescriptionTemplate>
                    </ListItemMeta>
                </ListItem>
            </AntList>
            <Divider/>
            <AntList DataSource="@Project.Staffs" TItem="StaffModel">
                <ListItem>
                    <ListItemMeta >
                        <TitleTemplate>
                            <h3>@context.Name</h3>
                        </TitleTemplate>
                        <DescriptionTemplate>
                            <p>@MemberModel.IdentityDictionary[context.Identity]</p>
                        </DescriptionTemplate>
                    </ListItemMeta>
                </ListItem>
            </AntList>
        }
    </Context>
</PageView>

@code {
    private string DepartmentName { get; set; } = "All";
    private bool IsAdmin { get; set; }
    private List<ProjectModel> Projects { get; set; } = [];
    [CascadingParameter] private MemberModel Member { get; set; } = new();
    [Parameter] public string? Id { get; set; }
    private ProjectModel Project { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Member.Identity == "Member")
        {
            Nav.NavigateTo("/Centre");
            return;
        }

        await using var context = await DbFactory.CreateDbContextAsync();

        if (!string.IsNullOrEmpty(Id))
        {
            var a = await context.Projects.FirstOrDefaultAsync(x => x.Id.ToString() == Id);
            if (a == null)
            {
                await MessageService.Error("项目不存在");
                Nav.NavigateTo("/Centre");
                return;
            }

            Project = a;
            IsAdmin = Member.Identity.Contains("President") || Member.Identity.Contains("Minister");
            return;
        }

        if (Member.Identity.Contains("President"))
        {
            Projects = await context.Projects.ToListAsync();
            IsAdmin = true;
        }
        else
        {
            DepartmentName = Member.Identity.Replace("Minister", "").Replace("Member", "");
            Projects = await context.Projects.Where(model => model.DepartmentName == DepartmentName || model.DepartmentName == "All").ToListAsync();
            IsAdmin = Member.Identity.Contains("Minister");
        }

        await base.OnInitializedAsync();
    }

}