@page "/Centre/Department"
@using iOSClub.Share.Data
@using iOSClub.Table.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SignContext> DbFactory
@inject NavigationManager Nav

<PageView Style="min-height: 100%">
    <Extra>
        @if (IsAdmin)
        {
            <Button Type="@ButtonType.Primary" OnClick="@(() => Nav.NavigateTo($"/Centre/EditProject"))">
                添加项目
            </Button>
        }
    </Extra>
    <Context>
        <Flex Wrap="wrap" Gap="middle" Justify="space-between">
            @foreach (var item in Projects)
            {
                <Card Hoverable Style="border-radius: 10px;" BodyStyle="margin: 10px">
                    <Flex Vertical Align="flex-end" Justify="space-between" Style="height: 200px">
                        <div>
                            <Flex Justify="space-between" Align="center">
                                <Title Level="2">@item.Title</Title>
                                <Tag Icon="apple" Color="blue-inverse">@SignRecord.DepartmentDictionary[item.DepartmentName]</Tag>
                            </Flex>
                            <Text Type="secondary">@($"{item.StartTime} - {item.EndTime}")</Text>
                        </div>

                        <Button Type="@ButtonType.Primary" OnClick="@(() => Nav.NavigateTo($"/Centre/Project/{item.Id}"))">
                            去看看
                        </Button>
                    </Flex>
                </Card>
            }
        </Flex>
    </Context>
</PageView>

@code {
    private string DepartmentName { get; set; } = "All";
    private bool IsAdmin { get; set; }
    private List<ProjectModel> Projects { get; set; } = [];
    [CascadingParameter] private MemberModel Member { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Member.Identity == "Member")
        {
            Nav.NavigateTo("/Centre");
            return;
        }

        await using var context = await DbFactory.CreateDbContextAsync();

        if (Member.Identity.Contains("President"))
        {
            Projects = await context.Projects.ToListAsync();
            IsAdmin = true;
        }
        else
        {
            DepartmentName = Member.Identity.Replace("Minister", "").Replace("Member", "");
            Projects = await context.Projects.Where(model => model.DepartmentName == DepartmentName || model.DepartmentName == "All").ToListAsync();
            IsAdmin = Member.Identity.Contains("Minister");
        }

        await base.OnInitializedAsync();
    }

}