@page "/Centre/PersonalData"
@using Microsoft.EntityFrameworkCore
@using iOSClub.Share.Data
@using iOSClub.Table.Models
@inject IDbContextFactory<SignContext> DbFactory

<PageTitle>我的信息 - 西建大iOS Club</PageTitle>

<PageView>
    <Extra>
        <p>当前身份:@MemberModel.IdentityDictionary[Member.Identity]</p>
    </Extra>
    <Context>
        <Form Model="Member"
              ValidateMode="@FormValidateMode.Rules"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed">
            <FormItem Class="item" Label="姓名" Rules="@(SignRecord.UserNameRules)">
                <Input @bind-Value="@context.UserName"/>
            </FormItem>
            <FormItem Class="item" Label="性别" Rules="SignRecord.GenderRules">
                <select class="form-control" @bind="@context.Gender">
                    <option value="" selected disabled hidden></option>
                    @foreach (var item in SignRecord.Genders)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </FormItem>
            <FormItem Class="item" Label="学号" Rules="SignRecord.IdRules">
                <Input @bind-Value="@context.UserId">
            </FormItem>
            <FormItem Class="item" Label="学院" Rules="SignRecord.AcademyRules">
                <select class="form-control" @bind="@context.Academy">
                    <option value="" selected disabled hidden></option>
                    @foreach (var item in SignRecord.Academies)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </FormItem>
            <FormItem Class="item" Label="政治面貌" Rules="SignRecord.PoliticalLandscapeRules">
                <select class="form-control" @bind="@context.PoliticalLandscape">
                    <option value="" selected disabled hidden></option>
                    @foreach (var item in SignRecord.PoliticalLandscapes)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </FormItem>

            <FormItem Class="item" Label="专业班级" Rules="SignRecord.ClassNameRules">
                <Input @bind-Value="@context.ClassName">
            </FormItem>

            <FormItem Class="item" Label="手机号码" Rules="SignRecord.PhoneNumRules">
                <Input @bind-Value="@context.PhoneNum">
            </FormItem>

            <FormItem Style="text-align: center">
                <Button Type="@ButtonType.Primary" HtmlType="submit">更改</Button>
            </FormItem>
        </Form>
    </Context>
</PageView>

<Modal Title="@("更改信息")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       OkText="@("确认")"
       CancelText="@("取消")"
       ConfirmLoading="@_confirmLoading">
    确定提交?
</Modal>

@code{
    bool _visible;
    bool _confirmLoading;


    private async Task HandleOk(MouseEventArgs e)
    {
        _confirmLoading = true;
        StateHasChanged();
        await Done();
        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }

}

@code {

    [CascadingParameter] private MemberModel Member { get; set; } = new();

}

@code
{

    private void OnFinish()
    {
        _visible = true;
    }

    private async Task Done()
    {
        if (Loading)
            return;
        try
        {
            Loading = true;
            await using var context = await DbFactory.CreateDbContextAsync();
            var f = await context.Students.FirstOrDefaultAsync(x => x.UserId == Member.UserId);
            if (f == null)
                context.Students.Add(Member);
            else
            {
                f.UserName = Member.UserName;
                f.Academy = Member.Academy;
                f.ClassName = Member.ClassName;
                f.PhoneNum = Member.PhoneNum;
                f.Gender = Member.Gender;
                f.PoliticalLandscape = Member.PoliticalLandscape;
            }

            await context.SaveChangesAsync();
        }
        finally
        {
            Loading = false;
        }
    }

    private bool Loading { get; set; }

    private void OnFinishFailed()
    {
        Console.WriteLine("出问题了");
        Loading = false;
    }

}

<style>
    .item{
        padding-left: 10px;
        padding-right: 10px;
    }
    
    .form-control {
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        /*border: 1px #ccc;*/
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;
        -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }
   
   option{
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
   }
   
</style>