@page "/Admin/Env"
@using System.Text
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using iOSClub.Share
@using iOSClub.Table.Models
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IWebHostEnvironment HostEnvironment
@inject IJSRuntime JS
@inject IDbContextFactory<SignContext> DbFactory

<PageTitle>环境</PageTitle>

<InputFile id="fileInput" OnChange="@UploadFiles" hidden multiple/>

<PageView Style="min-height: 100%">
    <Extra>
        <Space>
            <SpaceItem>
                <Button Type="@ButtonType.Primary" OnClick="JsonDownload">下载所有数据</Button>
            </SpaceItem>
            <Upload Name="files">
                <label class="ant-btn" for="fileInput">上传Json数据</label>
            </Upload>
        </Space>
    </Extra>
    <Context>
        <div style="margin: 10px">
            @if (HostEnvironment.IsDevelopment())
            {
                <Result Title="当前为开发环境！"/>
            }
            else if (HostEnvironment.IsProduction())
            {
                <Result Title="当前为生产环境！"/>
            }
            <Divider/>
            <h3>环境基本信息</h3>
            <Descriptions Bordered Column="@column" Layout="@DescriptionsLayout.Vertical">
                <DescriptionsItem Title="当前储存路径:">@HostEnvironment.WebRootPath</DescriptionsItem>
            </Descriptions>
        </div>
    </Context>
</PageView>

@code
{
    private readonly Dictionary<string, int> column = new()
    {
        { "xxl", 3 },
        { "xl", 3 },
        { "lg", 2 },
        { "md", 2 },
        { "sm", 1 },
        { "xs", 1 }
    };

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var reader = new StreamReader(e.File.OpenReadStream());
        var result = await reader.ReadToEndAsync();
        reader.Dispose();
        if (string.IsNullOrEmpty(result)) return;
        await using var context = await DbFactory.CreateDbContextAsync();

        var allData = JsonConvert.DeserializeObject<AllDataModel>(result);

        if (allData == null) return;

        await context.Students.AddRangeAsync(allData.Students);
        await  context.Staffs.AddRangeAsync(allData.Staffs.Where(staff => staff.Identity != "Founder"));
        await context.Events.AddRangeAsync(allData.Events);
        await context.Tasks.AddRangeAsync(allData.Tasks);
        await context.Projects.AddRangeAsync(allData.Projects);
        await context.Resources.AddRangeAsync(allData.Resources);
        await context.Tools.AddRangeAsync(allData.Tools);
        await context.SaveChangesAsync();
    }

    private async Task JsonDownload()
    {
        var options = new JsonSerializerOptions
        {
            Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
        };
        await using var context = await DbFactory.CreateDbContextAsync();

        var Models = new AllDataModel
        {
            Students = await context.Students.ToListAsync(),
            Staffs = await context.Staffs.ToListAsync(),
            Events = await context.Events.ToListAsync(),
            Tasks = await context.Tasks.ToListAsync(),
            Projects = await context.Projects.ToListAsync(),
            Resources = await context.Resources.ToListAsync(),
            Tools = await context.Tools.ToListAsync()
        };
        var jsonString = JsonSerializer.Serialize(Models, options);
        var data = Encoding.UTF8.GetBytes(jsonString);

        await JS.InvokeVoidAsync("jsSaveAsFile", "allData.json", Convert.ToBase64String(data));
    }
}