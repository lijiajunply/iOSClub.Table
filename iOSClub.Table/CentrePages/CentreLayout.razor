@layout MainLayout
@inherits LayoutComponentBase
@using System.Security.Claims
@using iOSClub.Share.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SignContext> DbFactory
@inject NavigationManager Nav

<AuthorizeView>
    <Authorized>
        <Layout Style="height: 100vh">
            <Header Style="background: #fff;">
                <Flex Vertical="false" Justify="space-between" Align="center">
                    <header>
                        <img src="iOS_Club_LOGO.png" style="width:40px; height:40px" class="logo" alt=""/>
                    </header>
                    <Button Size="@AntSizeLDSType.Large" Type="@ButtonType.Text">
                        <Icon Type="logout" Theme="outline"/>
                    </Button>
                </Flex>
            </Header>
            <Layout Style="max-height: 100%;overflow:hidden">
                <Sider Breakpoint="@BreakpointType.Md" Class="sider"
                       CollapsedWidth="64" Trigger="@null">
                    <Menu Theme="MenuTheme.Light"
                          Mode="MenuMode.Inline">
                        <MenuItem RouterLink="/Centre" RouterMatch="NavLinkMatch.All">
                            <Icon Type="home" Theme="outline"/>
                            <span class="nav-text">主页</span>
                        </MenuItem>

                        @if (State != null)
                        {
                            <MenuItem RouterLink="/Centre/PersonalData" RouterMatch="NavLinkMatch.All">
                                <Icon Type="user" Theme="outline"/>
                                <span class="nav-text">成员信息</span>
                            </MenuItem>
                        }

                        @if (State == null || State!.Value)
                        {
                            <MenuItem RouterLink="/Admin" RouterMatch="NavLinkMatch.All">
                                <Icon Type="upload" Theme="outline"/>
                                <span class="nav-text">nav 3</span>
                            </MenuItem>
                        }

                        <MenuItem RouterLink="/Centre/Tool" RouterMatch="NavLinkMatch.All">
                            <Icon Type="video-camera" Theme="outline"/>
                            <span class="nav-text">nav 4</span>
                        </MenuItem>
                    </Menu>
                </Sider>
                <Content Style="overflow: auto;background-color: #ffffff">
                    <CascadingValue Value="@Member">
                        @Body
                    </CascadingValue>
                </Content>
            </Layout>
        </Layout>
    </Authorized>
    <Authorizing>
        <p>正在进行身份验证，请稍等</p>
    </Authorizing>
    <NotAuthorized>
        <div class="body">
            <div class="main">
                <ReturnView ReturnInfo="" FlushedUrl="@Nav.Uri"/>
            </div>
        </div>

    </NotAuthorized>
</AuthorizeView>

@code
{
    private MemberModel Member { get; set; } = new();

    private bool? State { get; set; } = false;

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (authenticationState is null) return;
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var name = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
            var identity = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
            var id = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(identity) || string.IsNullOrEmpty(id)) return;
            await using var context = await DbFactory.CreateDbContextAsync();
            var model = await context.Students.FirstOrDefaultAsync(x => x.UserId == id && x.UserName == name);
            if (model == null)
            {
                if (identity == "Founder") State = null;
                return;
            }

            State = identity != "PracticalMember" && identity != "NewMediaMember" && identity != "Member" && identity != "TechnologyMember";
            Member = MemberModel.AutoCopy<SignModel, MemberModel>(model);
            Member.Identity = identity;
        }
    }
}

<style>
    .sider {
        background: #ffffff;
        overflow: auto;
        height: 100%;
    }

    body {
        height: 100% !important;
    }
</style>