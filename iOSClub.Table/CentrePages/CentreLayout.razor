@layout MainLayout
@inherits LayoutComponentBase
@using System.Security.Claims
@using iOSClub.Share
@using iOSClub.Share.Data
@using iOSClub.Table.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<SignContext> DbFactory
@inject NavigationManager Nav

<Row OnBreakpoint="OnBreakpoint"/>

<AuthorizeView>
    <Authorized>
        <Layout Style="height: 100vh">
            <Header>
                <Flex Vertical="false" Align="center" Gap="@(_isMobile ? "small" : "large")">
                    @if (_isMobile)
                    {
                        <Button Size="@AntSizeLDSType.Large" Type="@ButtonType.Text" OnClick="@(() => _drawerVisible = !_drawerVisible)">
                            <Icon Type="menu" Theme="outline" Style="color:#fff;font-size: 30px"/>
                        </Button>
                        <Image Src="iOS_Club_LOGO.png" Style="width:40px; height:40px"/>
                    }
                    else
                    {
                        <Image Src="iOS_Club_LOGO.png" Style="width:40px; height:40px"/>
                        <div style="color:#f3f5f7;font-size: 32px">iOS Club个人中心</div>
                    }
                </Flex>
            </Header>
            <Layout Style="max-height: 100%;overflow:hidden">
                @if (_isMobile)
                {
                    <Drawer Placement="left" Closable="false"
                            Visible="@_drawerVisible"
                            OnClose="@(() => _drawerVisible = false)">
                        @Menu
                    </Drawer>
                }
                else
                {
                    <Sider Breakpoint="@BreakpointType.Md" Class="sider"
                           CollapsedWidth="64" Trigger="@null">
                        @Menu
                    </Sider>
                }
                <Content Class="layout-context">
                    <CascadingValue Value="@Member">
                        @Body
                    </CascadingValue>
                </Content>
            </Layout>
        </Layout>
    </Authorized>
    <NotAuthorized>
        <div class="body">
            <div class="main">
                <ReturnView ReturnInfo="" FlushedUrl="@Nav.Uri"/>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private void OnBreakpoint(BreakpointType breakpoint)
    {
        _isMobile = breakpoint.IsIn(BreakpointType.Sm, BreakpointType.Xs, BreakpointType.Md);
        StateHasChanged();
    }

    private bool _isMobile;
    private bool _drawerVisible;

    private MemberModel Member { get; set; } = new();

    private string State { get; set; } = "Member";

    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (authenticationState is null) return;
        var authState = await authenticationState;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var name = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
            var identity = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
            var id = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(identity) || string.IsNullOrEmpty(id)) return;
            await using var context = await DbFactory.CreateDbContextAsync();
            var model = await context.Students.FirstOrDefaultAsync(x => x.UserId == id && x.UserName == name);

            State = identity;
            if (model == null) return;
            Member = MemberModel.AutoCopy<StudentModel, MemberModel>(model);
            Member.Identity = identity;
        }
    }
}

@code
{
    private RenderFragment Menu => @<Template>
        <Menu Theme="MenuTheme.Light"
              Mode="MenuMode.Inline">
            <MenuItem RouterLink="/Centre" RouterMatch="NavLinkMatch.All">
                <Icon Type="home" Theme="outline"/>
                <span class="nav-text">主页</span>
            </MenuItem>

            @if (State != "Founder")
            {
                <MenuItem RouterLink="/Centre/PersonalData" RouterMatch="NavLinkMatch.All">
                    <Icon Type="user" Theme="outline"/>
                    <span class="nav-text">成员信息</span>
                </MenuItem>
                @if (State != "Member")
                {
                    <MenuItem RouterLink="/Centre/Department" RouterMatch="NavLinkMatch.All">
                        <Icon Type="project" Theme="outline"/>
                        <span class="nav-text">社团项目</span>
                    </MenuItem>
                    <MenuItem RouterLink="/Centre/Resource" RouterMatch="NavLinkMatch.All">
                        <Icon Type="file-text" Theme="outline"/>
                        <span class="nav-text">社团资源</span>
                    </MenuItem>
                }
            }

            @if (State.Contains("Minister") || State == "President" || State == "Founder")
            {
                <SubMenu>
                    <TitleTemplate>
                        <Icon Type="upload" Theme="outline"/>
                        <span class="nav-text">管理</span>
                    </TitleTemplate>
                    <ChildContent>
                        <MenuItem RouterLink="/Admin/MemberData" RouterMatch="NavLinkMatch.All">
                            <Icon Type="team" Theme="outline"/>
                            <span class="nav-text">成员管理</span>
                        </MenuItem>
                        <MenuItem RouterLink="/Admin/EventManager" RouterMatch="NavLinkMatch.All">
                            <Icon Type="trophy" Theme="outline"/>
                            <span class="nav-text">活动管理</span>
                        </MenuItem>
                        <MenuItem RouterLink="/Admin/Env" RouterMatch="NavLinkMatch.All">
                            <Icon Type="setting" Theme="outline"/>
                            <span class="nav-text">环境管理</span>
                        </MenuItem>
                        <MenuItem RouterLink="/Admin/Permissions" RouterMatch="NavLinkMatch.All">
                            <Icon Type="alert" Theme="outline"/>
                            <span class="nav-text">权限管理</span>
                        </MenuItem>
                    </ChildContent>
                </SubMenu>
            }

            <MenuItem RouterLink="/Centre/Tool" RouterMatch="NavLinkMatch.All">
                <Icon Type="tool" Theme="outline"/>
                <span class="nav-text">社团小工具</span>
            </MenuItem>
            <MenuItem OnClick="@(() => Nav.NavigateTo("/Logout"))">
                <Icon Type="logout" Theme="outline"/>
                <span class="nav-text">退出登录</span>
            </MenuItem>
        </Menu>
    </Template>;
}

<style>
    .sider {
        background-color: #f3f5f7;
        overflow: auto;
        height: 100%;
    }

    body {
        height: 100% !important;
    }

    .layout-context {
        overflow: auto;
        background-color: #f3f5f7;
        margin: 24px 16px 0;
    }
</style>