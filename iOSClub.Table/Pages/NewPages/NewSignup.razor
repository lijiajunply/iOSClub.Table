@page "/NewSignup/{Text?}"
@using System.Diagnostics.CodeAnalysis
@using iOSClub.Share
@using iOSClub.Share.Data
@using iOSClub.Table.Models
@using Microsoft.EntityFrameworkCore
@inject IMessageService _message
@inject IDbContextFactory<SignContext> DbFactory
@inject IJSRuntime Js

<PageTitle>创建您的iMember账号 - 西建大iOS Club</PageTitle>

@if (isWeiXin)
{
    <div id="Mask" class="body">
        <img src="/other/WeChat.jpg" alt="请使用浏览器注册，谢谢"/>
    </div>
}
else
{
    <GridRow Type="flex" Justify="center" Style="height: 80vh;">
        <GridCol Xs="24" Sm="24" Md="24" Lg="24" Xl="10" Xxl="10">
            <Card Class="login-form">
                <Flex Gap="middle">
                    <Image Src="iOS_Club_LOGO.png" Preview="false" Style="width:40px; height:40px"/>
                    <div style="font-size: 24px;font-weight: bold;">XAUAT iOS Club</div>
                </Flex>
                <Carousel @ref="_carousel" DotPosition="@CarouselDotPosition.Top">
                    @foreach (var item in steps)
                    {
                        <CarouselSlick>
                            @item
                        </CarouselSlick>
                    }
                </Carousel>
            </Card>
        </GridCol>
    </GridRow>
}


@code {

    [Parameter] public string? Text { get; set; }

    private int _index;

    private int Index
    {
        get => _index;
        set
        {
            _carousel.GoTo(value);
            _index = value;
        }
    }

    private void OnPreClick()
    {
        Index--;
    }

    private async Task OnValidSubmit()
    {
        if (Index == steps.Length - 1)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            var f = await context.Students.FirstOrDefaultAsync(x => x.UserId == Model.UserId);
            if (f == null)
                context.Students.Add(Model);
            else
            {
                f.UserName = Model.UserName;
                f.Academy = Model.Academy;
                f.ClassName = Model.ClassName;
                f.PhoneNum = Model.PhoneNum;
                f.Gender = Model.Gender;
                f.PoliticalLandscape = Model.PoliticalLandscape;
            }

            await context.SaveChangesAsync();
            return;
        }

        if (Index == 0)
        {
            await using var context = await DbFactory.CreateDbContextAsync();

            var permission = await context.Staffs.FirstOrDefaultAsync(x => x.UserId == Model.UserId && x.Name == Model.UserName);

            if (permission != null)
            {
                await _message.Info("该成员已存在!");
                return;
            }

            var signModel = await context.Students.FirstOrDefaultAsync(x => x.UserId == Model.UserId && x.UserName == Model.UserName);
            if (signModel != null)
            {
                await _message.Info("该成员已存在!");
                return;
            }
        }

        Index++;
    }

    private StudentModel Model { get; } = new();
    private bool isWeiXin;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Text == "ios")
        {
            isWeiXin = await Js.InvokeAsync<bool>("isWeiXin");
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}

@code
{
    private RenderFragment[] steps =>
    [
        (
            @<Template>
                <Form Model="Model"
                      OnFinish="OnValidSubmit"
                      RequiredMark="FormRequiredMark.Optional"
                      ValidateMode="@FormValidateMode.Rules">
                    <Title Level="3">创建您的iMember账户</Title>
                    <FormItem Class="item" Label="姓名" Rules="@(SignRecord.UserNameRules)">
                        <Input Placeholder="请输入您的姓名" Bordered="false" @bind-Value="@context.UserName"/>
                    </FormItem>
                    <FormItem Class="item" Label="学号" Rules="SignRecord.IdRules">
                        <Input Placeholder="请输入您的学号" Bordered="false" @bind-Value="@context.UserId">
                    </FormItem>
                    <Divider/>
                    <FormItem Style="text-align:right">
                        <Button Type="@ButtonType.Primary" HtmlType="submit">下一步</Button>
                    </FormItem>
                </Form>
            </Template>
        ),
        (
            @<Template>
                <Form Model="Model"
                      RequiredMark="FormRequiredMark.Optional"
                      OnFinish="OnValidSubmit"
                      ValidateMode="@FormValidateMode.Rules">
                    <Title Level="3">请填写您的个人信息</Title>
                    <FormItem Class="item" Label="学院" Rules="SignRecord.AcademyRules">
                        <select class="form-control" @bind="@context.Academy">
                            <option value="" selected disabled hidden></option>
                            @foreach (var item in SignRecord.Academies)
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                    </FormItem>
                    <FormItem Class="item" Label="专业班级" Rules="SignRecord.ClassNameRules">
                        <Input Placeholder="请输入您的专业班级" Bordered="false" @bind-Value="@context.ClassName">
                    </FormItem>
                    <FormItem Class="item" Label="手机号码" Rules="SignRecord.PhoneNumRules">
                        <Input Placeholder="请输入您的手机号码" Bordered="false" @bind-Value="@context.PhoneNum">
                    </FormItem>
                    <Divider/>
                    <FormItem>
                        <Flex justify="flex-end" Align="flex-end" Gap="middle">
                            <Button Type="@ButtonType.Primary" OnClick="OnPreClick">退回</Button>
                            <Button Type="@ButtonType.Primary" HtmlType="submit">下一步</Button>
                        </Flex>
                    </FormItem>
                </Form>
            </Template>
        ),
        (
            @<Template>
                <Form Model="Model"
                      RequiredMark="FormRequiredMark.Optional"
                      OnFinish="OnValidSubmit"
                      ValidateMode="@FormValidateMode.Rules">
                    <Title Level="3">即将初始化您的iMember账户</Title>
                    <FormItem Class="item" Label="性别" Rules="SignRecord.GenderRules">
                        <RadioGroup @bind-Value="@context.Gender" ButtonStyle="@RadioButtonStyle.Solid">
                            @foreach (var item in SignRecord.Genders)
                            {
                                <Radio RadioButton Value="@item">@item</Radio>
                            }
                        </RadioGroup>
                    </FormItem>
                    <FormItem Class="item" Label="政治面貌" Rules="SignRecord.PoliticalLandscapeRules">
                        <RadioGroup @bind-Value="@context.PoliticalLandscape" ButtonStyle="@RadioButtonStyle.Solid">
                            @foreach (var item in SignRecord.PoliticalLandscapes)
                            {
                                <Radio RadioButton Value="@item">@item</Radio>
                            }
                        </RadioGroup>
                    </FormItem>
                    <Divider/>
                    <FormItem>
                        <Flex justify="flex-end" Align="flex-end" Gap="middle">
                            <Button Type="@ButtonType.Primary" OnClick="OnPreClick">退回</Button>
                            <Button Type="@ButtonType.Primary" HtmlType="submit">完成</Button>
                        </Flex>
                    </FormItem>
                </Form>
            </Template>
        )
    ];
}

@code {
    [NotNull] private Carousel? _carousel { get; set; }
}


<style>
    .login-form {
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.3);
        -webkit-backdrop-filter: blur(20px);
        backdrop-filter: blur(20px);
        box-shadow: 0 0 10px #c8c8c8;
        margin-top: 30px;
        margin-bottom: 30px;
        max-width: 100vw
    }

    #Mask {
        min-height: 100vh;
    }

    .item {
        padding-top: 10px;
    }

    option {
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
    }
    
    option:hover{
        background-color: #0071c1;    
    }

    .ant-form {
        margin-top: 20px;
    }
    
    .form-control {
        display: block;
        width: 100%;
        height: 34px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        border: 0;
        border-bottom: 1px solid #ccc;
        border-radius: 4px;
        -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
        -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
        transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
    }
</style>