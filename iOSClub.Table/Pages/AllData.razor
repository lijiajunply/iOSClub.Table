@page "/AllData"
@using Microsoft.EntityFrameworkCore
@using iOSClub.Table.Data
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Text
@inject IJSRuntime JS
@inject IDbContextFactory<SignContext> DbFactory

<PageTitle>数据</PageTitle>

<Button Type="@ButtonType.Primary" OnClick="@DataDownload">下载Json文件</Button>
<Table TItem="SignModel" DataSource="@Models">
    <PropertyColumn Title="姓名" Property="c=>c.UserName"/>
    <PropertyColumn Title="学号" Property="c=>c.Id"/>
    <PropertyColumn Title="学院" Property="c=>c.Academy"/>
    <PropertyColumn Title="政治面貌" Property="c=>c.PoliticalLandscape"/>
    <PropertyColumn Title="性别" Property="c=>c.Gender"/>
    <PropertyColumn Title="专业班级" Property="c=>c.ClassName"/>
    <PropertyColumn Title="手机号码" Property="c=>c.PhoneNum"/>
</Table>
@code {
    
    public List<SignModel> Models { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbFactory.CreateDbContextAsync();
        Models = await context.Students.ToListAsync();
        await base.OnInitializedAsync();
    }

    private async Task DataDownload()
    {
        var fileStream = GetFileStream();
        var fileName = "data.json";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private Stream GetFileStream()
    {
        string jsonString = JsonSerializer.Serialize(Models);

        var randomBinaryData = Encoding.UTF8.GetBytes(jsonString);
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

}