@page "/Login"
@using iOSClub.Table.Auth
@using Microsoft.EntityFrameworkCore
@using iOSClub.Share.Data
@inject IMessageService _message
@inject IDbContextFactory<SignContext> DbFactory
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigation

<PageTitle>登录</PageTitle>

<link href="css/InputBox.css" rel="stylesheet"/>

<GridRow Class="table" type="flex" justify="center">
    <Form Model="Model" Layout="vertical"
          OnFinish="Submit"
          OnFinishFailed="OnFinishFailed"
          class="bg-login">
        <h2>登录</h2>
        <FormItem Class="item">
            <div class="input-box">
                <input @bind="@context.Name" required=""/>
                <label>姓名</label>
            </div>
        </FormItem>
        <FormItem Class="item">
            <div class="input-box">
                <input @bind="@context.Id" required=""/>
                <label>学号</label>
            </div>
        </FormItem>
        <FormItem Class="item" Style="text-align: center">
            <Button Type="@ButtonType.Primary" HtmlType="submit">提交</Button>
        </FormItem>
        <FormItem Class="item">
            <Paragraph class="Submit" Style="text-align: center">
                没有账号？去<NavLink href="Signup" Match="NavLinkMatch.All">注册</NavLink>一个
            </Paragraph>
        </FormItem>
    </Form>
</GridRow>


@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public LoginModel Model { get; } = new();

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(Model.Name) || string.IsNullOrEmpty(Model.Id))
        {
            await _message.Info("没数据!");
            return;
        }

        await using var context = await DbFactory.CreateDbContextAsync();

        var peo = await context.Staffs.FirstOrDefaultAsync(x => x.UserId == Model.Id && x.Name == Model.Name);

        var identity = "Member";
        if (peo != null) identity = peo.Identity;
        else
        {
            var signModel = await context.Students.FirstOrDefaultAsync(x => x.UserId == Model.Id && x.UserName == Model.Name);

            if (signModel == null)
            {
                await _message.Info("用户账号密码出错!");
                return;
            }
        }

        var provider = (Provider)authStateProvider;
        await provider.UpdateAuthState(new PermissionsModel(Model, identity));

        await _message.Info("登陆成功!");
        navigation.NavigateTo("/Centre", true);
    }

    private void OnFinishFailed()
    {
        _message.Error("出错了!");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                navigation.NavigateTo("/Centre");
            }
        }
    }
}

<style scoped>

.table{
display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.bg-login {

  border-radius: 10px;
  margin: auto;

  overflow: hidden;
  padding: 38px;

  background: rgba(255, 255, 255, 0.3);
  -webkit-backdrop-filter: blur(20px);
  backdrop-filter: blur(20px);
  box-shadow: inset 0 0 6px rgba(255, 255, 255, 0.3);
}

h2 {
  /* margin-top: 20px; */
  margin-bottom: 20px;
  color: #f5f5f7;;
  text-align: center;
  animation: fade-in 1s ease-in-out;
}

.item{
  padding-left: 10px;
  padding-right: 10px;
}

.Submit {
  margin: 0 auto;
  color: #f5f5f7;
}
</style>